# This is a basic Azure DevOps pipeline to validate Terraform

name: ' Validate Terraform code: '

variables:
  - group: 'TerraformProdDeploy'

# We disable builds for any commits as everything should go through pull requests
trigger: none

pr:
  branches:
    include:
    - main
  paths:
    # We want to handle only changes relevant for this pipeline
    include:
    - environments/manual-approve-with-azure-devops/
    - modules/databricks-department-clusters/
    exclude:
    - environments/manual-approve-with-azure-devops/README.md
    - environments/manual-approve-with-github-actions/
    - modules/databricks-department-clusters/README.md
    
pool:
  vmImage: 'ubuntu-latest'

steps:

- checkout: self

# - script: |
#     echo "Working in $(pwd) path=$PATH"
#     curl -o terraform_${TERRAFORM_VERSION}_linux_amd64.zip https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
#     unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip
#     chmod a+x terraform
#     mv terraform ~/
#     ~/terraform -version
#   displayName: 'Install Terraform'

- script: |
    brew tap hashicorp/tap
    brew install hashicorp/tap/terraform
    terraform -version
  displayName: 'Install Terraform'
  
- task: AzureCLI@2
  displayName: 'Extract information from Azure CLI'
  inputs:
    scriptType: bash
    scriptLocation: inlineScript
    azureSubscription: $(SERVICE_CONNECTION_NAME)
    addSpnToEnvironment: true
    inlineScript: |
      subscription_id=$(az account list --query "[?isDefault].id"|jq -r '.[0]')
      echo "##vso[task.setvariable variable=ARM_CLIENT_ID]${servicePrincipalId}"
      echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]${servicePrincipalKey}"
      echo "##vso[task.setvariable variable=ARM_TENANT_ID]${tenantId}"
      echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]${subscription_id}"

- script: |
    terraform fmt -check
  displayName: 'Check formatting of Terraform code'
  workingDirectory: environments/manual-approve-with-azure-devops/
  enabled: 'true'

- script: |
    echo "ARM_CLIENT_ID='$ARM_CLIENT_ID' ARM_CLIENT_SECRET='$ARM_CLIENT_SECRET' ARM_TENANT_ID='$ARM_TENANT_ID' ARM_SUBSCRIPTION_ID='$ARM_SUBSCRIPTION_ID'"
    terraform init \
      -backend-config="resource_group_name=$BACKEND_RG_NAME" \
      -backend-config="storage_account_name=$BACKEND_SA_NAME" \
      -backend-config="container_name=$BACKEND_CONTAINER_NAME" \
      -backend-config="key=$BACKEND_KEY"   
  displayName: 'Terraform init'
  workingDirectory: environments/manual-approve-with-azure-devops/
  enabled: 'true'
  env:
    ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)

- script: |
    terraform validate -no-color
  displayName: 'Terraform validate'
  workingDirectory: environments/manual-approve-with-azure-devops/
  enabled: 'true'

- script: |
    echo "ARM_CLIENT_ID='$ARM_CLIENT_ID' ARM_CLIENT_SECRET='$ARM_CLIENT_SECRET' ARM_TENANT_ID='$ARM_TENANT_ID' ARM_SUBSCRIPTION_ID='$ARM_SUBSCRIPTION_ID'"
    echo "DATABRICKS_HOST='$DATABRICKS_HOST' DATABRICKS_TOKEN='$DATABRICKS_TOKEN'"
    terraform plan -lock=false -input=false -no-color
  displayName: 'Terraform plan'
  workingDirectory: environments/manual-approve-with-azure-devops/
  enabled: 'true'
  env:
    ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
    DATABRICKS_TOKEN: $(DATABRICKS_TOKEN)
